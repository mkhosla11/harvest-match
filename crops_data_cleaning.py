# -*- coding: utf-8 -*-
"""crops_data_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LYDtYXFNFWXYjsKpWG6AGXQeDhxkZLLh
"""

import pandas as pd

# Load the original CSV
df = pd.read_csv("B58A9A34-259A-3631-A697-A61F6F6916DB.csv")

# Extract month from 'Period' column
df['Month'] = df['Period'].str.extract(r'-\s*([A-Z]+)')[0].str.title()

# Normalize units to kilograms per acre
unit_conversions = {
    'TONS / ACRE': 907.185,  # 1 ton (US) = 907.185 kg
    'BU / ACRE': 27.216,     # Average conversion (e.g., wheat), varies by crop
    'LB / ACRE': 0.453592    # 1 pound = 0.453592 kg
}

# prior unit
df['Unit'] = df['Data Item'].str.extract(r'MEASURED IN (.+)')[0].str.strip()

df.head()

# Convert 'Value' to numeric
df['Value'] = pd.to_numeric(df['Value'], errors='coerce')

# Normalize yield to kg/acre
df['Yield_kg_per_acre'] = df.apply(
    lambda row: row['Value'] * unit_conversions.get(row['Unit'], None) if pd.notnull(row['Value']) and row['Unit'] in unit_conversions else None,
    axis=1
)

cleaned_df = df.dropna(subset=['Yield_kg_per_acre'])

cleaned_df.head()

final_df = cleaned_df[['Year', 'State', 'Commodity', 'Month', 'Yield_kg_per_acre']].rename(columns={
    'Commodity': 'Crop'
})

final_df.head()

print(final_df.isna().sum())

month_to_season = {
    'Dec': 'Winter', 'Jan': 'Winter', 'Feb': 'Winter',
    'Mar': 'Spring', 'Apr': 'Spring', 'May': 'Spring',
    'Jun': 'Summer', 'Jul': 'Summer', 'Aug': 'Summer',
    'Sep': 'Fall',   'Oct': 'Fall',   'Nov': 'Fall'
}

# Apply mapping to create 'Season' column
final_df['Season'] = cleaned_df['Month'].map(month_to_season)

final_df.head()

final_df['State'].nunique()

final_df.to_csv("cleaned_crop_data.csv", index=False)
import psycopg2

conn = psycopg2.connect(
    host='database-1.cyljtjkkhdgh.us-east-1.rds.amazonaws.com',
    dbname='postgres',
    user='postgres',
    password='database1234',
    port=5432,
    sslmode="require"
)
cur = conn.cursor()
cur.execute("""
DROP TABLE IF EXISTS crop_data;
CREATE TABLE crop_data (
    year BIGINT,
    state TEXT,
    crop TEXT,
    month TEXT,
    yield_kg_per_acre DOUBLE PRECISION,
    season TEXT
);
""")
conn.commit()
with open("cleaned_crop_data.csv", "r") as f:
    cur.copy_expert("COPY crop_data FROM STDIN WITH CSV HEADER", f)

conn.commit()
cur.close()
conn.close()